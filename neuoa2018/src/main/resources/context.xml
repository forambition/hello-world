<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
		http://mybatis.org/schema/mybatis-spring 
		http://mybatis.org/schema/mybatis-spring.xsd">
	<!-- 设置扫描Bean的路径 -->
	<context:component-scan base-package="com.neusoft.oa"></context:component-scan>	
		
	<aop:aspectj-autoproxy/>
	<!-- 扫描DAO接口的包 -->
	<mybatis:scan base-package="com.neusoft.oa.dao" />
	
	<!-- C3P0配置数据库连接池 -->
	<bean id="dataSource"  class="com.mchange.v2.c3p0.ComboPooledDataSource"  destroy-method="close">  
	   <property name="driverClass" value="oracle.jdbc.driver.OracleDriver"></property>  
       <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:lhd"></property>  
	   <property name="user" value="neusoftoa"></property>  
	   <property name="password" value="neusoftoa"></property>  
	   <property name="acquireIncrement" value="2"></property>  
	   <property name="initialPoolSize" value="3"></property>  
	   <property name="maxPoolSize" value="2"></property>  
	   <property name="minPoolSize" value="1"></property>  
	   <property name="acquireRetryDelay" value="100"></property>  
	   <property name="acquireRetryAttempts" value="10"></property>  
	   <property name="breakAfterAcquireFailure" value="false"></property>  
	</bean>
	<!-- 配置SqlSesionFactory工厂类 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  <property name="dataSource" ref="dataSource" />
	  <property name="mapperLocations">
	     <list>
	         <value>classpath*:com/neusoft/oa/dao/mapper/*.xml</value>
	         <value>classpath*:com/neusoft/oa/hr/dao/mapper/*.xml</value>
	         <value>classpath*:com/neusoft/oa/doc/dao/mapper/*.xml</value>
	         
	     </list>
	  </property>
	  <property name="typeAliasesPackage" value="com.neusoft.oa.model,com.neusoft.oa.hr.model"/>
	  <property name="configLocation" value="classpath:mybatis-config.xml"/>
	  
	</bean>
	<!-- 获取SqlSession对象 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	  <constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 获得部门DAO接口的对象  
	   单独的DAO对象配置，实际项目不采用这种单个配置的方式，而是采用扫描所有DAO接口的模式
	<bean id="IDepartmentDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
	  <property name="mapperInterface" value="com.neusoft.oa.dao.IDepartmentDao" />
	  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	-->
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 启动事务注解模式 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
